// Code generated by command: go run asm.go -out primitivefuncs_amd64.s. DO NOT EDIT.

// func MACWithCarry(a uint64, b uint64, c uint64, carry uint64) (uint64, uint64)
TEXT 路MACWithCarry(SB), $0-48
	MOVQ b+8(FP), CX
	MOVQ c+16(FP), AX

	// Multiply b and c
	MULQ CX
	MOVQ a+0(FP), CX

	// Add a
	ADDQ CX, AX

	// Add to result carry if needed
	ADCQ $0x00, DX
	MOVQ carry+24(FP), CX

	// Add input carry to running result
	ADDQ CX, AX

	// Add to result carry if needed
	ADCQ $0x00, DX
	MOVQ AX, ret+32(FP)
	MOVQ DX, ret1+40(FP)
	RET

// func SubWithBorrow(a uint64, b uint64, borrow uint64) (uint64, uint64)
TEXT 路SubWithBorrow(SB), $0-40
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), CX

	// a = a - b
	XORQ DX, DX
	SUBQ CX, AX

	// Zero out borrow1 and set if overflowed
	SETCS DL
	MOVQ  borrow+16(FP), CX

	// a = a - borrow
	XORQ BX, BX
	SUBQ CX, AX

	// Zero out borrow2 and set if overflowed
	SETCS BL

	// borrow2 = borrow2 | borrow1
	ORQ  DX, BX
	MOVQ AX, ret+24(FP)
	MOVQ BX, ret1+32(FP)
	RET

// func AddWithCarry(a uint64, b uint64, carry uint64) (uint64, uint64)
TEXT 路AddWithCarry(SB), $0-40
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), CX
	MOVQ carry+16(FP), DX

	// Zero out new carry
	XORQ BX, BX

	// Add a + b
	ADDQ CX, AX

	// Add to new carry if needed
	ADCQ $0x00, BX

	// Add old carry
	ADDQ DX, AX

	// Add to new carry if needed
	ADCQ $0x00, BX
	MOVQ AX, ret+24(FP)
	MOVQ BX, ret1+32(FP)
	RET

// func MultiplyFQRepr(a [6]uint64, b [6]uint64) (hi [6]uint64, lo [6]uint64)
TEXT 路MultiplyFQRepr(SB), $0-192
	// carry = 0
	XORQ R10, R10
	MOVQ a_0+0(FP), AX
	MOVQ b_0+48(FP), BX

	// registers[0] = 0
	XORQ CX, CX

	// carry = ((registers[0] + a[0] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[0] = (registers[0] + a[0] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ CX, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, CX
	MOVQ a_0+0(FP), AX
	MOVQ b_1+56(FP), BX

	// registers[1] = 0
	XORQ BP, BP

	// carry = ((registers[1] + a[0] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[1] = (registers[1] + a[0] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ BP, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, BP
	MOVQ a_0+0(FP), AX
	MOVQ b_2+64(FP), BX

	// registers[2] = 0
	XORQ SI, SI

	// carry = ((registers[2] + a[0] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[2] = (registers[2] + a[0] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ SI, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, SI
	MOVQ a_0+0(FP), AX
	MOVQ b_3+72(FP), BX

	// registers[3] = 0
	XORQ DI, DI

	// carry = ((registers[3] + a[0] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[0] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, DI
	MOVQ a_0+0(FP), AX
	MOVQ b_4+80(FP), BX

	// registers[4] = 0
	XORQ R8, R8

	// carry = ((registers[4] + a[0] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[0] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, R8
	MOVQ a_0+0(FP), AX
	MOVQ b_5+88(FP), BX

	// registers[5] = 0
	XORQ R9, R9

	// carry = ((registers[5] + a[0] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[0] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, R9

	// registers[6] = carry
	MOVQ R10, R10

	// carry = 0
	XORQ R11, R11
	MOVQ a_1+8(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[1] + a[1] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[1] = (registers[1] + a[1] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ BP, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, BP
	MOVQ a_1+8(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[2] + a[1] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[2] = (registers[2] + a[1] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ SI, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, SI
	MOVQ a_1+8(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[3] + a[1] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[1] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, DI
	MOVQ a_1+8(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[4] + a[1] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[1] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, R8
	MOVQ a_1+8(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[5] + a[1] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[1] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, R9
	MOVQ a_1+8(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[6] + a[1] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[1] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, R10

	// registers[7] = carry
	MOVQ R11, R11

	// carry = 0
	XORQ R12, R12
	MOVQ a_2+16(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[2] + a[2] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[2] = (registers[2] + a[2] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ SI, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, SI
	MOVQ a_2+16(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[3] + a[2] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[2] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, DI
	MOVQ a_2+16(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[4] + a[2] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[2] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R8
	MOVQ a_2+16(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[5] + a[2] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[2] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R9
	MOVQ a_2+16(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[6] + a[2] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[2] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R10
	MOVQ a_2+16(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[7] + a[2] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[2] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R11

	// registers[8] = carry
	MOVQ R12, R12

	// carry = 0
	XORQ R13, R13
	MOVQ a_3+24(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[3] + a[3] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[3] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, DI
	MOVQ a_3+24(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[4] + a[3] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[3] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R8
	MOVQ a_3+24(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[5] + a[3] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[3] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R9
	MOVQ a_3+24(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[6] + a[3] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[3] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R10
	MOVQ a_3+24(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[7] + a[3] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[3] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R11
	MOVQ a_3+24(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[8] + a[3] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[8] = (registers[8] + a[3] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R12, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R12

	// registers[9] = carry
	MOVQ R13, R13

	// carry = 0
	XORQ R14, R14
	MOVQ a_4+32(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[4] + a[4] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[4] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R8
	MOVQ a_4+32(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[5] + a[4] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[4] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R9
	MOVQ a_4+32(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[6] + a[4] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[4] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R10
	MOVQ a_4+32(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[7] + a[4] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[4] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R11
	MOVQ a_4+32(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[8] + a[4] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[8] = (registers[8] + a[4] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R12, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R12
	MOVQ a_4+32(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[9] + a[4] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[9] = (registers[9] + a[4] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R13, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R13

	// registers[10] = carry
	MOVQ R14, R14

	// carry = 0
	XORQ R15, R15
	MOVQ a_5+40(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[5] + a[5] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[5] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R9
	MOVQ a_5+40(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[6] + a[5] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[5] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R10
	MOVQ a_5+40(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[7] + a[5] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[5] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R11
	MOVQ a_5+40(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[8] + a[5] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[8] = (registers[8] + a[5] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R12, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R12
	MOVQ a_5+40(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[9] + a[5] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[9] = (registers[9] + a[5] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R13, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R13
	MOVQ a_5+40(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[10] + a[5] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[10] = (registers[10] + a[5] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R14, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R14

	// registers[11] = carry
	MOVQ R15, AX

	// lo[0] = registers[0]
	MOVQ CX, lo_0+144(FP)

	// lo[1] = registers[1]
	MOVQ BP, lo_1+152(FP)

	// lo[2] = registers[2]
	MOVQ SI, lo_2+160(FP)

	// lo[3] = registers[3]
	MOVQ DI, lo_3+168(FP)

	// lo[4] = registers[4]
	MOVQ R8, lo_4+176(FP)

	// lo[5] = registers[5]
	MOVQ R9, lo_5+184(FP)

	// hi[0] = registers[6]
	MOVQ R10, hi_0+96(FP)

	// hi[1] = registers[7]
	MOVQ R11, hi_1+104(FP)

	// hi[2] = registers[8]
	MOVQ R12, hi_2+112(FP)

	// hi[3] = registers[9]
	MOVQ R13, hi_3+120(FP)

	// hi[4] = registers[10]
	MOVQ R14, hi_4+128(FP)

	// hi[5] = registers[11]
	MOVQ AX, hi_5+136(FP)
	RET
